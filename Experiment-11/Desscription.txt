
# PROJECT: REST API for Playing Card Collection

---

### 1) Technologies Used

a) **Node.js** – Provides the asynchronous runtime environment for running the server.
b) **Express.js** – Used as the web framework to build the RESTful API, define routes, and handle HTTP requests.
c) **JavaScript (ES6+)** – Implements the application logic, data manipulation, and route handling.

---

### 2) Project Overview

a) This project is a **RESTful API** designed to manage a collection of playing cards.
b) It demonstrates key backend concepts such as **routing, handling HTTP methods (GET, POST, DELETE), and working with in-memory data**.
c) The main objective was to **practice building a resource-oriented API** by applying REST design principles.
d) The application serves as a **beginner-friendly example** of building data-driven backend services using Node.js and Express.

---

### 3) Project File Structure

The project is kept simple and contained within a single file, which includes the server setup, in-memory datastore, and API routes.

```
Experiment-11/
├── node_modules/         # Contains installed dependencies like Express
├── package.json          # Defines project metadata and scripts
└── server.js             # Main application file containing server and API logic
```

---

### 4) Structure

**API Endpoints & In-Memory Data:**

* The application’s state is managed with a **JavaScript array of card objects**, which acts as an in-memory database.
* API endpoints are defined to perform **CRUD operations** (Create, Read, Delete) on this array.

**Snippets:**

i) **In-Memory Data Store** – The collection of cards is stored in an array along with a counter for assigning unique IDs.

```js
let cards = [
  { id: 1, suit: 'Hearts', value: 'Ace' },
  { id: 2, suit: 'Spades', value: 'King' },
  // ... more cards
];
let nextId = 4;
```

ii) **Get All Cards (GET /cards)** – Returns the full list of cards as JSON.

```js
app.get('/cards', (req, res) => {
  res.json(cards);
});
```

iii) **Add New Card (POST /cards)** – Creates a new card by reading `suit` and `value` from the request body, assigns an ID, and appends it to the array.

```js
app.post('/cards', (req, res) => {
  const { suit, value } = req.body;
  if (!suit || !value) {
    return res.status(400).json({ message: 'Suit and value are required' });
  }
  const newCard = {
    id: nextId++,
    suit,
    value
  };
  cards.push(newCard);
  res.status(201).json(newCard);
});
```

iv) **Delete Card (DELETE /cards/\:id)** – Removes a card by ID using a URL parameter, finds it in the array, and deletes it with `splice`.

```js
app.delete('/cards/:id', (req, res) => {
  const cardId = parseInt(req.params.id);
  const cardIndex = cards.findIndex(c => c.id === cardId);
  if (cardIndex !== -1) {
    const [removedCard] = cards.splice(cardIndex, 1);
    res.json({ message: `Card with ID ${cardId} removed`, card: removedCard });
  } else {
    res.status(404).json({ message: 'Card not found' });
  }
});
```

---

### 5) Learning Outcomes

a) Learned how to **set up an Express.js server** from scratch.
b) Gained hands-on experience in **designing and implementing RESTful APIs** with clear, logical endpoints.
c) Understood the use of different **HTTP methods (GET, POST, DELETE)** for CRUD functionality.
d) Worked with **URL parameters (`req.params`)** and **JSON request bodies (`req.body`)**.
e) Implemented **basic validation** to ensure correct input and maintain data integrity.

---

### 6) Key Concepts

a) RESTful API Design Principles
b) Express.js Routing
c) CRUD Operations (Create, Read, Delete)
d) In-Memory Data Storage
e) HTTP Request/Response Cycle
f) JSON Data Handling
g) Express Middleware (`express.json()`)
